from aiogram import types, Dispatcher
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove, InlineKeyboardButton, InlineKeyboardMarkup
from create_bot import bot, dp, BD_URI
import emoji

import psycopg2

db_connection = psycopg2.connect(BD_URI, sslmode='require')
db_object = db_connection.cursor()



class FSM_user(StatesGroup):#–ö–ª–∞—Å –Ω–µ–æ–±—Ö–æ–¥–∏–º –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –º–µ–∂–¥—É —Å–æ—Å—Ç–æ—è–Ω–∏—è–º–∏
    number_user = State()
    mag_user = State()


async def start_work(message: types.Message):
    inkb = InlineKeyboardMarkup(row_width=1).add(InlineKeyboardButton(text="–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è", callback_data='registration'))

    text = "–í–∞—Å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –ë–æ—Ç –Ø—Ä—á–µ –ö–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–∏ üëã, –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–æ–π—Ç–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é"
    await message.answer(text, reply_markup=inkb)


async def set_user_number(callback: types.CallbackQuery, state: FSMContext):
    #–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –µ—Å—Ç—å –ª–∏ —É–∂–µ –∑–∞–≤—è–∑–∞–Ω–Ω—ã–π –º–∞–≥–∞–∑–∏–Ω –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    db_object.execute('SELECT * FROM users WHERE user_id = %s', (str(callback.from_user.id),))
    result = db_object.fetchone()
    if not result:
        await callback.message.answer(text='–í–≤–µ–¥–∏—Ç–µ  –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ 8911111111')
        await FSM_user.number_user.set()
    else:
        await callback.message.answer(f'–ö –≤–∞–º —É–∂–µ –ø—Ä–∏–≤—è–∑–∞–Ω –º–∞–≥–∞–∑–∏–Ω {result[3]}, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –¥–ª—è —Å–º–µ–Ω—ã')


async def set_mag_number(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['number_user'] = message.text
    await FSM_user.next()

    mags = list()
    #keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    db_object.execute('SELECT * FROM users WHERE user_number = %s ORDER BY mag_name DESC', (str(message.text),))
    result = db_object.fetchall()
    if not result:
        await message.answer(text='–ü–æ –¥–∞–Ω–Ω–æ–º—É –Ω–æ–º–µ—Ä—É –Ω–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –º–∞–≥–∞–∑–∏–Ω–æ–≤... –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É')
        await state.finish()
    else:
        for item in enumerate(result):
            mags.append(item[1][3])

    await message.answer(result)

    keyboard = types.InlineKeyboardMarkup()
    backbutton = types.InlineKeyboardButton(text="", callback_data="MagList")
    button_list = [types.InlineKeyboardButton(text=x, callback_data=x) for x in mags]
    keyboard.add(*button_list, backbutton)

    #for size in mags:
    #    keyboard.add(size)#–î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –∑–∞–ø—Ä–æ—Å–∞
    await message.answer("–í–∞–º –¥–æ—Å—Ç—É–ø–Ω—ã —Å–ª–µ–¥—É—é—â–∏–µ –º–∞–≥–∞–∑–∏–Ω—ã:", reply_markup=keyboard)


async def final_data_FSM(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['mag_user'] = message.text

    #async with state.proxy() as data:
    #   await message.reply(str(data))#–∞ –≤–æ—Ç –∏ –¥–∞–Ω–Ω—ã–µ —á—Ç–æ –º—ã –Ω–∞–≤–≤–æ–¥–∏–ª–∏

    async with state.proxy() as data:
        query = "Update users set user_id = %s where user_number = %s and mag_number = %s"
        db_object.execute(query, (message.from_user.id, data['number_user'],data['mag_user']))
        db_connection.commit()

        await message.reply(f"–ú–∞–≥–∞–∑–∏–Ω {data['mag_user']} –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –∑–∞ –≤–∞–º–∏!", reply_markup=types.ReplyKeyboardRemove())#reply_markup=types.ReplyKeyboardRemove() - –£–±–∏—Ä–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞

    await state.finish()


async def echo(message: types.Message):
    await message.answer(message.text)


def register_handlers_client(dp:Dispatcher):
    dp.register_message_handler(start_work, commands="start")
    #dp.register_callback_query_handler(start_registration, text='registration')
    #dp.register_message_handler(set_user_number, commands="reg", state="*")
    dp.register_callback_query_handler(set_user_number, text='registration', state="*")
    dp.register_message_handler(set_mag_number, state=FSM_user.number_user, content_types=types.ContentTypes.TEXT)
    #dp.register_message_handler(final_data_FSM, state=FSM_user.mag_user, content_types=types.ContentTypes.TEXT)
    dp.register_message_handler(final_data_FSM, state=FSM_user.mag_user, content_types=types.ContentTypes.TEXT)

    dp.register_message_handler(echo)


